{"ast":null,"code":"var _jsxFileName = \"/Users/julian/Coding/Task/frontend/src/components/Task.js\";\n// Task.js\n\nimport React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useNavigate } from 'react-router-dom';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport Datetime from 'react-datetime';\nimport 'react-datetime/css/react-datetime.css';\nimport './Task.css';\nconst Task = ({\n  show,\n  onClose,\n  createTask,\n  editTask,\n  taskToEdit\n}) => {\n  const navigate = useNavigate();\n  const categories = [{\n    id: 'to_do',\n    name: 'To Do'\n  }, {\n    id: 'in_progress',\n    name: 'In Progress'\n  }, {\n    id: 'awaiting',\n    name: 'Awaiting Feedback'\n  }, {\n    id: 'done',\n    name: 'Done'\n  }];\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [category, setCategory] = useState('');\n  const [dueDate, setDueDate] = useState(null);\n  const [subtaskText, setSubtaskText] = useState('');\n  const [subtasks, setSubtasks] = useState([]);\n  const [assignedContacts, setAssignedContacts] = useState([]);\n  const [selectedPriority, setSelectedPriority] = useState(null);\n  const [formErrors, setFormErrors] = useState({\n    title: false,\n    description: false,\n    category: false\n  });\n  const [dummyContacts, setDummyContacts] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:8000/api/contacts/').then(response => response.json()).then(data => {\n      setDummyContacts(data);\n    }).catch(error => {\n      console.error('Error fetching contacts:', error);\n    });\n  }, []);\n  const getRandomColor = () => {\n    const colors = ['#007bff', '#28a745', '#dc3545', '#ffc107', '#17a2b8'];\n    // Implement logic to choose colors based on availability\n    // Not implemented here since it's more about Django part\n    return '#6c757d';\n  };\n  const handleAddSubtask = () => {\n    if (subtaskText.trim()) {\n      setSubtasks([...subtasks, {\n        text: subtaskText,\n        completed: false\n      }]);\n      setSubtaskText('');\n    }\n  };\n  const handleAssignContact = event => {\n    const selectedContactId = parseInt(event.target.value);\n    const selectedContact = dummyContacts.find(contact => contact.id === selectedContactId);\n    if (selectedContact && !assignedContacts.some(contact => contact.id === selectedContact.id)) {\n      const color = getRandomColor();\n      setAssignedContacts([...assignedContacts, {\n        ...selectedContact,\n        color\n      }]);\n    }\n  };\n  const handleRemoveAssignedContact = contactId => {\n    const updatedContacts = assignedContacts.filter(contact => contact.id !== contactId);\n    setAssignedContacts(updatedContacts);\n  };\n  const handleSelectPriority = priority => {\n    setSelectedPriority(priority);\n  };\n  const handleClearAll = () => {\n    setTitle('');\n    setDescription('');\n    setCategory('');\n    setDueDate(null);\n    setSubtaskText('');\n    setSubtasks([]);\n    setAssignedContacts([]);\n    setSelectedPriority(null);\n    setFormErrors({\n      title: false,\n      description: false,\n      category: false\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    let errors = {};\n    if (!title.trim()) {\n      errors = {\n        ...errors,\n        title: true\n      };\n    }\n    if (!description.trim()) {\n      errors = {\n        ...errors,\n        description: true\n      };\n    }\n    if (!category) {\n      errors = {\n        ...errors,\n        category: true\n      };\n    }\n    if (Object.keys(errors).length > 0) {\n      setFormErrors(errors);\n      return;\n    }\n    const taskData = {\n      title,\n      description,\n      category,\n      due_date: dueDate,\n      priority: selectedPriority,\n      subtasks: subtasks.map(subtask => ({\n        text: subtask.text,\n        completed: subtask.completed\n      })),\n      contacts: assignedContacts.map(contact => ({\n        id: contact.id,\n        first_name: contact.first_name,\n        last_name: contact.last_name,\n        color: contact.color\n      }))\n    };\n    if (taskToEdit) {\n      // Edit existing task\n      fetch(`http://localhost:8000/api/tasks/${taskToEdit.id}/`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(taskData)\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      }).then(data => {\n        console.log('Updated task:', data);\n        handleClearAll();\n        onClose();\n        navigate('/board'); // Redirect to the board\n      }).catch(error => {\n        console.error('Fetch error:', error);\n      });\n    } else {\n      // Create new task\n      fetch('http://localhost:8000/api/tasks/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(taskData)\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      }).then(data => {\n        console.log('Created task:', data);\n        handleClearAll();\n        onClose();\n        navigate('/board'); // Redirect to the board\n      }).catch(error => {\n        console.error('Fetch error:', error);\n      });\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `task-modal ${show ? 'show' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-modal-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"close-btn\",\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faTimes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 55\n    }\n  })), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, taskToEdit ? 'Edit Task' : 'Create New Task'), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: title,\n    onChange: e => setTitle(e.target.value),\n    className: `form-control ${formErrors.title ? 'is-invalid' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }), formErrors.title && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 34\n    }\n  }, \"Title is required.\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: description,\n    onChange: e => setDescription(e.target.value),\n    className: `form-control ${formErrors.description ? 'is-invalid' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  }), formErrors.description && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 40\n    }\n  }, \"Description is required.\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }\n  }, \"Category\"), /*#__PURE__*/React.createElement(\"select\", {\n    value: category,\n    onChange: e => setCategory(e.target.value),\n    className: `form-control ${formErrors.category ? 'is-invalid' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 15\n    }\n  }, \"Select category\"), categories.map(cat => /*#__PURE__*/React.createElement(\"option\", {\n    key: cat.id,\n    value: cat.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 17\n    }\n  }, cat.name))), formErrors.category && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 37\n    }\n  }, \"Category is required.\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }\n  }, \"Due Date\"), /*#__PURE__*/React.createElement(Datetime, {\n    value: dueDate,\n    onChange: date => setDueDate(date),\n    inputProps: {\n      className: 'form-control'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  }, \"Priority\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"priority-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }\n  }, ['low', 'medium', 'high', 'urgent'].map(priority => /*#__PURE__*/React.createElement(\"div\", {\n    key: priority,\n    className: `priority-option ${selectedPriority === priority ? 'selected' : ''}`,\n    onClick: () => handleSelectPriority(priority),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 17\n    }\n  }, priority)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }\n  }, \"Subtasks\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subtasks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 15\n    }\n  }, subtasks.map((subtask, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 19\n    }\n  }, subtask.text))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subtask-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: subtaskText,\n    onChange: e => setSubtaskText(e.target.value),\n    placeholder: \"Add subtask\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handleAddSubtask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 17\n    }\n  }, \"Add\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }\n  }, \"Assigned Contacts\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"assigned-contacts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 15\n    }\n  }, assignedContacts.map(contact => /*#__PURE__*/React.createElement(\"li\", {\n    key: contact.id,\n    style: {\n      borderLeftColor: contact.color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 19\n    }\n  }, contact.first_name, \" \", contact.last_name, /*#__PURE__*/React.createElement(\"span\", {\n    onClick: () => handleRemoveAssignedContact(contact.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 21\n    }\n  }, \"x\")))), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: handleAssignContact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 17\n    }\n  }, \"Assign contact\"), dummyContacts.map(contact => /*#__PURE__*/React.createElement(\"option\", {\n    key: contact.id,\n    value: contact.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 19\n    }\n  }, contact.first_name, \" \", contact.last_name))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }\n  }, taskToEdit ? 'Update Task' : 'Create Task')))));\n};\nexport default Task;","map":{"version":3,"names":["React","useState","useEffect","FontAwesomeIcon","useNavigate","faTimes","Datetime","Task","show","onClose","createTask","editTask","taskToEdit","navigate","categories","id","name","title","setTitle","description","setDescription","category","setCategory","dueDate","setDueDate","subtaskText","setSubtaskText","subtasks","setSubtasks","assignedContacts","setAssignedContacts","selectedPriority","setSelectedPriority","formErrors","setFormErrors","dummyContacts","setDummyContacts","fetch","then","response","json","data","catch","error","console","getRandomColor","colors","handleAddSubtask","trim","text","completed","handleAssignContact","event","selectedContactId","parseInt","target","value","selectedContact","find","contact","some","color","handleRemoveAssignedContact","contactId","updatedContacts","filter","handleSelectPriority","priority","handleClearAll","handleSubmit","e","preventDefault","errors","Object","keys","length","taskData","due_date","map","subtask","contacts","first_name","last_name","method","headers","body","JSON","stringify","ok","Error","status","log","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","icon","onSubmit","type","onChange","cat","key","date","inputProps","index","placeholder","style","borderLeftColor"],"sources":["/Users/julian/Coding/Task/frontend/src/components/Task.js"],"sourcesContent":["// Task.js\n\nimport React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useNavigate } from 'react-router-dom';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport Datetime from 'react-datetime';\nimport 'react-datetime/css/react-datetime.css';\nimport './Task.css';\n\nconst Task = ({ show, onClose, createTask, editTask, taskToEdit }) => {\n  const navigate = useNavigate();\n\n  const categories = [\n    { id: 'to_do', name: 'To Do' },\n    { id: 'in_progress', name: 'In Progress' },\n    { id: 'awaiting', name: 'Awaiting Feedback' },\n    { id: 'done', name: 'Done' }\n  ];\n\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [category, setCategory] = useState('');\n  const [dueDate, setDueDate] = useState(null);\n  const [subtaskText, setSubtaskText] = useState('');\n  const [subtasks, setSubtasks] = useState([]);\n  const [assignedContacts, setAssignedContacts] = useState([]);\n  const [selectedPriority, setSelectedPriority] = useState(null);\n  const [formErrors, setFormErrors] = useState({\n    title: false,\n    description: false,\n    category: false\n  });\n\n  const [dummyContacts, setDummyContacts] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:8000/api/contacts/')\n      .then(response => response.json())\n      .then(data => {\n        setDummyContacts(data);\n      })\n      .catch(error => {\n        console.error('Error fetching contacts:', error);\n      });\n  }, []);\n\n  const getRandomColor = () => {\n    const colors = ['#007bff', '#28a745', '#dc3545', '#ffc107', '#17a2b8'];\n    // Implement logic to choose colors based on availability\n    // Not implemented here since it's more about Django part\n    return '#6c757d';\n  };\n\n  const handleAddSubtask = () => {\n    if (subtaskText.trim()) {\n      setSubtasks([...subtasks, { text: subtaskText, completed: false }]);\n      setSubtaskText('');\n    }\n  };\n\n  const handleAssignContact = event => {\n    const selectedContactId = parseInt(event.target.value);\n    const selectedContact = dummyContacts.find(contact => contact.id === selectedContactId);\n\n    if (selectedContact && !assignedContacts.some(contact => contact.id === selectedContact.id)) {\n      const color = getRandomColor();\n      setAssignedContacts([...assignedContacts, { ...selectedContact, color }]);\n    }\n  };\n\n  const handleRemoveAssignedContact = contactId => {\n    const updatedContacts = assignedContacts.filter(contact => contact.id !== contactId);\n    setAssignedContacts(updatedContacts);\n  };\n\n  const handleSelectPriority = priority => {\n    setSelectedPriority(priority);\n  };\n\n  const handleClearAll = () => {\n    setTitle('');\n    setDescription('');\n    setCategory('');\n    setDueDate(null);\n    setSubtaskText('');\n    setSubtasks([]);\n    setAssignedContacts([]);\n    setSelectedPriority(null);\n    setFormErrors({\n      title: false,\n      description: false,\n      category: false\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let errors = {};\n\n    if (!title.trim()) {\n      errors = { ...errors, title: true };\n    }\n    if (!description.trim()) {\n      errors = { ...errors, description: true };\n    }\n    if (!category) {\n      errors = { ...errors, category: true };\n    }\n\n    if (Object.keys(errors).length > 0) {\n      setFormErrors(errors);\n      return;\n    }\n\n    const taskData = {\n      title,\n      description,\n      category,\n      due_date: dueDate,\n      priority: selectedPriority,\n      subtasks: subtasks.map(subtask => ({\n        text: subtask.text,\n        completed: subtask.completed\n      })),\n      contacts: assignedContacts.map(contact => ({\n        id: contact.id,\n        first_name: contact.first_name,\n        last_name: contact.last_name,\n        color: contact.color\n      }))\n    };\n\n    if (taskToEdit) {\n      // Edit existing task\n      fetch(`http://localhost:8000/api/tasks/${taskToEdit.id}/`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(taskData),\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(data => {\n        console.log('Updated task:', data);\n        handleClearAll();\n        onClose();\n        navigate('/board'); // Redirect to the board\n      })\n      .catch((error) => {\n        console.error('Fetch error:', error);\n      });\n    } else {\n      // Create new task\n      fetch('http://localhost:8000/api/tasks/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(taskData),\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(data => {\n        console.log('Created task:', data);\n        handleClearAll();\n        onClose();\n        navigate('/board'); // Redirect to the board\n      })\n      .catch((error) => {\n        console.error('Fetch error:', error);\n      });\n    }\n  };\n\n  return (\n    <div className={`task-modal ${show ? 'show' : ''}`}>\n      <div className=\"task-modal-content\">\n        <span className=\"close-btn\" onClick={onClose}><FontAwesomeIcon icon={faTimes} /></span>\n        <h2>{taskToEdit ? 'Edit Task' : 'Create New Task'}</h2>\n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label>Title</label>\n            <input\n              type=\"text\"\n              value={title}\n              onChange={e => setTitle(e.target.value)}\n              className={`form-control ${formErrors.title ? 'is-invalid' : ''}`}\n            />\n            {formErrors.title && <div className=\"invalid-feedback\">Title is required.</div>}\n          </div>\n          <div className=\"form-group\">\n            <label>Description</label>\n            <textarea\n              value={description}\n              onChange={e => setDescription(e.target.value)}\n              className={`form-control ${formErrors.description ? 'is-invalid' : ''}`}\n            ></textarea>\n            {formErrors.description && <div className=\"invalid-feedback\">Description is required.</div>}\n          </div>\n          <div className=\"form-group\">\n            <label>Category</label>\n            <select\n              value={category}\n              onChange={e => setCategory(e.target.value)}\n              className={`form-control ${formErrors.category ? 'is-invalid' : ''}`}\n            >\n              <option value=\"\">Select category</option>\n              {categories.map(cat => (\n                <option key={cat.id} value={cat.id}>{cat.name}</option>\n              ))}\n            </select>\n            {formErrors.category && <div className=\"invalid-feedback\">Category is required.</div>}\n          </div>\n          <div className=\"form-group\">\n            <label>Due Date</label>\n            <Datetime\n              value={dueDate}\n              onChange={date => setDueDate(date)}\n              inputProps={{ className: 'form-control' }}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label>Priority</label>\n            <div className=\"priority-options\">\n              {['low', 'medium', 'high', 'urgent'].map(priority => (\n                <div\n                  key={priority}\n                  className={`priority-option ${selectedPriority === priority ? 'selected' : ''}`}\n                  onClick={() => handleSelectPriority(priority)}\n                >\n                  {priority}\n                </div>\n              ))}\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label>Subtasks</label>\n            <div className=\"subtasks\">\n              <ul>\n                {subtasks.map((subtask, index) => (\n                  <li key={index}>{subtask.text}</li>\n                ))}\n              </ul>\n              <div className=\"subtask-input\">\n                <input\n                  type=\"text\"\n                  value={subtaskText}\n                  onChange={e => setSubtaskText(e.target.value)}\n                  placeholder=\"Add subtask\"\n                />\n                <button type=\"button\" onClick={handleAddSubtask}>Add</button>\n              </div>\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label>Assigned Contacts</label>\n            <div className=\"assigned-contacts\">\n              <ul>\n                {assignedContacts.map(contact => (\n                  <li key={contact.id} style={{ borderLeftColor: contact.color }}>\n                    {contact.first_name} {contact.last_name}\n                    <span onClick={() => handleRemoveAssignedContact(contact.id)}>x</span>\n                  </li>\n                ))}\n              </ul>\n              <select onChange={handleAssignContact}>\n                <option value=\"\">Assign contact</option>\n                {dummyContacts.map(contact => (\n                  <option key={contact.id} value={contact.id}>{contact.first_name} {contact.last_name}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <button type=\"submit\" className=\"btn btn-primary\">{taskToEdit ? 'Update Task' : 'Create Task'}</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Task;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}