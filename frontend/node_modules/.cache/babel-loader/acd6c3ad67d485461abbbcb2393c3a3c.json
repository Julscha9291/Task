{"ast":null,"code":"var _jsxFileName = \"/Users/julian/Coding/Task/frontend/src/components/Task.js\";\nimport React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useNavigate } from 'react-router-dom';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport Datetime from 'react-datetime';\nimport 'react-datetime/css/react-datetime.css';\nimport './Task.css';\nimport PropTypes from 'prop-types';\nconst Task = ({\n  show,\n  onClose,\n  taskToEdit,\n  initialCategory\n}) => {\n  const navigate = useNavigate();\n  const categories = [{\n    id: 'todo',\n    name: 'To Do'\n  }, {\n    id: 'inProgress',\n    name: 'In Progress'\n  }, {\n    id: 'awaitingFeedback',\n    name: 'Awaiting Feedback'\n  }, {\n    id: 'done',\n    name: 'Done'\n  }];\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [category, setCategory] = useState(initialCategory || '');\n  const [dueDate, setDueDate] = useState(null);\n  const [subtaskText, setSubtaskText] = useState('');\n  const [subtasks, setSubtasks] = useState([]);\n  const [assignedContacts, setAssignedContacts] = useState([]);\n  const [selectedPriority, setSelectedPriority] = useState(null);\n  const [formErrors, setFormErrors] = useState({\n    title: false,\n    description: false,\n    category: false\n  });\n  const [users, setUsers] = useState([]);\n  const [usedColors, setUsedColors] = useState({});\n  const [selectedContacts, setSelectedContacts] = useState([]);\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_URL}api/users/`).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.indexOf('application/json') !== -1) {\n        return response.json();\n      } else {\n        throw new Error('Received non-JSON response');\n      }\n    }).then(data => {\n      setUsers(data); // Set users state with received JSON data\n    }).catch(error => {});\n  }, []);\n  useEffect(() => {\n    if (taskToEdit) {\n      setTitle(taskToEdit.title);\n      setDescription(taskToEdit.description);\n      setCategory(taskToEdit.category || ''); // Handle undefined category\n      setDueDate(taskToEdit.due_date ? new Date(taskToEdit.due_date) : null);\n      setSubtasks(taskToEdit.subtasks || []);\n      setAssignedContacts(taskToEdit.contacts || []);\n      setSelectedPriority(taskToEdit.priority || null);\n    } else {\n      setCategory(initialCategory || ''); // Set category to an empty string if undefined\n    }\n  }, [taskToEdit, initialCategory]);\n  const handleAddSubtask = () => {\n    if (subtaskText.trim()) {\n      setSubtasks([...subtasks, {\n        text: subtaskText,\n        completed: false\n      }]);\n      setSubtaskText('');\n    }\n  };\n  const handleAssignContact = event => {\n    const selectedContactId = parseInt(event.target.value);\n    const selectedContact = users.find(user => user.id === selectedContactId);\n    if (selectedContact && !assignedContacts.some(contact => contact.id === selectedContact.id)) {\n      setAssignedContacts([...assignedContacts, selectedContact]);\n      setSelectedContacts([...selectedContacts, selectedContact]);\n      setUsedColors({\n        ...usedColors,\n        [selectedContact.color]: true\n      });\n    }\n  };\n  const handleRemoveAssignedContact = contactId => {\n    const removedContact = assignedContacts.find(contact => contact.id === contactId);\n    if (removedContact) {\n      const {\n        color\n      } = removedContact;\n      const updatedContacts = assignedContacts.filter(contact => contact.id !== contactId);\n      setAssignedContacts(updatedContacts);\n      setUsedColors({\n        ...usedColors,\n        [color]: false\n      });\n      setSelectedContacts(selectedContacts.filter(contact => contact.id !== contactId));\n    }\n  };\n  const handleSelectPriority = priority => {\n    setSelectedPriority(priority);\n  };\n  const handleClearAll = () => {\n    setTitle('');\n    setDescription('');\n    setCategory('');\n    setDueDate(null);\n    setSubtaskText('');\n    setSubtasks([]);\n    setAssignedContacts([]);\n    setSelectedPriority(null);\n    setUsedColors({});\n    setFormErrors({\n      title: false,\n      description: false,\n      category: false\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    let errors = {};\n    if (!title.trim()) {\n      errors = {\n        ...errors,\n        title: true\n      };\n    }\n    if (!description.trim()) {\n      errors = {\n        ...errors,\n        description: true\n      };\n    }\n    if (!category) {\n      errors = {\n        ...errors,\n        category: true\n      };\n    }\n    if (Object.keys(errors).length > 0) {\n      setFormErrors(errors);\n      return;\n    }\n    const taskData = {\n      title,\n      description,\n      category,\n      due_date: dueDate,\n      priority: selectedPriority,\n      subtasks: subtasks.map(subtask => ({\n        text: subtask.text,\n        completed: subtask.completed\n      })),\n      contacts: assignedContacts.map(contact => ({\n        id: contact.id,\n        // ID des Kontakts\n        first_name: contact.first_name,\n        last_name: contact.last_name,\n        color: contact.color\n      }))\n    };\n\n    // Check for invalid contact IDs\n    const invalidContacts = taskData.contacts.filter(contact => !contact.id);\n    if (invalidContacts.length > 0) {\n      return; // Prevent form submission\n    }\n    if (taskToEdit) {\n      fetch(`${process.env.REACT_APP_API_URL}/api/tasks/${taskToEdit.id}/`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(taskData)\n      }).then(response => {\n        if (!response.ok) {\n          return response.json().then(errorData => {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          });\n        }\n        return response.json();\n      }).then(data => {\n        handleClearAll();\n        onClose();\n        navigate('/board'); // Redirect to the board\n        // window.location.reload();\n      }).catch(error => {});\n    } else {\n      fetch(`${process.env.REACT_APP_API_URL}api/tasks/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(taskData)\n      }).then(response => {\n        if (!response.ok) {\n          return response.json().then(errorData => {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          });\n        }\n        return response.json();\n      }).then(data => {\n        // window.location.reload();\n        handleClearAll();\n        onClose();\n        navigate('/board'); // Redirect to the board\n      }).catch(error => {});\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `task-container ${show ? 'show' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"close-button\",\n    onClick: () => {\n      onClose();\n      navigate('/board');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }\n  }, \"\\xD7\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-title-popup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 11\n    }\n  }, taskToEdit ? 'Edit Task' : 'Add Task'))), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"task-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 11\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: title,\n    onChange: e => setTitle(e.target.value),\n    placeholder: \"Enter a title\",\n    className: formErrors.title ? 'error' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }), formErrors.title && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 32\n    }\n  }, \"This field is required\"), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 11\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: description,\n    onChange: e => setDescription(e.target.value),\n    placeholder: \"Enter a description\",\n    className: formErrors.description ? 'error' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 11\n    }\n  }), formErrors.description && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 38\n    }\n  }, \"This field is required\"), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 11\n    }\n  }, \"Category\"), /*#__PURE__*/React.createElement(\"select\", {\n    value: category,\n    onChange: e => setCategory(e.target.value),\n    className: formErrors.category ? 'error' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }, \"Select task category\"), categories.map(cat => /*#__PURE__*/React.createElement(\"option\", {\n    key: cat.id,\n    value: cat.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 15\n    }\n  }, cat.name))), formErrors.category && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 35\n    }\n  }, \"This field is required\"), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 11\n    }\n  }, \"Assigned to\"), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: handleAssignContact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }\n  }, \"Select contacts to assign\"), users.map(user => /*#__PURE__*/React.createElement(\"option\", {\n    key: user.id,\n    value: user.id,\n    disabled: selectedContacts.some(c => c.id === user.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 15\n    }\n  }, user.first_name, \" \", user.last_name))), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"assigned-contacts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 11\n    }\n  }, assignedContacts.map(contact => /*#__PURE__*/React.createElement(\"li\", {\n    key: contact.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contact-info-task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contact-color\",\n    style: {\n      backgroundColor: contact.color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 19\n    }\n  }), contact.first_name, \" \", contact.last_name, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => handleRemoveAssignedContact(contact.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 19\n    }\n  }, \"Remove\")))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 11\n    }\n  }, \"Due Date\"), /*#__PURE__*/React.createElement(Datetime, {\n    value: dueDate,\n    onChange: date => setDueDate(date),\n    timeFormat: false,\n    closeOnSelect: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 11\n    }\n  }, \"Subtasks\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subtask-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: subtaskText,\n    onChange: e => setSubtaskText(e.target.value),\n    placeholder: \"Enter a subtask\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handleAddSubtask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 13\n    }\n  }, \"Add\")), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"subtasks-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 11\n    }\n  }, subtasks.map((subtask, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 15\n    }\n  }, subtask.text, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => {\n      const updatedSubtasks = [...subtasks];\n      updatedSubtasks[index].completed = !updatedSubtasks[index].completed;\n      setSubtasks(updatedSubtasks);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 17\n    }\n  }, subtask.completed ? 'Undo' : 'Complete')))), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 11\n    }\n  }, \"Priority\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"priority-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 11\n    }\n  }, ['low', 'medium', 'high'].map(priority => /*#__PURE__*/React.createElement(\"button\", {\n    key: priority,\n    type: \"button\",\n    className: selectedPriority === priority ? 'selected' : '',\n    onClick: () => handleSelectPriority(priority),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 15\n    }\n  }, priority.charAt(0).toUpperCase() + priority.slice(1))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"submit-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 11\n    }\n  }, taskToEdit ? 'Update Task' : 'Create Task'), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"clear-button\",\n    onClick: handleClearAll,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 11\n    }\n  }, \"Clear All\"))));\n};\nTask.propTypes = {\n  show: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  taskToEdit: PropTypes.object,\n  initialCategory: PropTypes.string\n};\nexport default Task;","map":{"version":3,"names":["React","useState","useEffect","FontAwesomeIcon","useNavigate","faTimes","Datetime","PropTypes","Task","show","onClose","taskToEdit","initialCategory","navigate","categories","id","name","title","setTitle","description","setDescription","category","setCategory","dueDate","setDueDate","subtaskText","setSubtaskText","subtasks","setSubtasks","assignedContacts","setAssignedContacts","selectedPriority","setSelectedPriority","formErrors","setFormErrors","users","setUsers","usedColors","setUsedColors","selectedContacts","setSelectedContacts","fetch","process","env","REACT_APP_API_URL","then","response","ok","Error","status","contentType","headers","get","indexOf","json","data","catch","error","due_date","Date","contacts","priority","handleAddSubtask","trim","text","completed","handleAssignContact","event","selectedContactId","parseInt","target","value","selectedContact","find","user","some","contact","color","handleRemoveAssignedContact","contactId","removedContact","updatedContacts","filter","handleSelectPriority","handleClearAll","handleSubmit","e","preventDefault","errors","Object","keys","length","taskData","map","subtask","first_name","last_name","invalidContacts","method","body","JSON","stringify","errorData","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","type","onChange","placeholder","cat","key","disabled","c","style","backgroundColor","date","timeFormat","closeOnSelect","index","updatedSubtasks","charAt","toUpperCase","slice","propTypes","bool","isRequired","func","object","string"],"sources":["/Users/julian/Coding/Task/frontend/src/components/Task.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useNavigate } from 'react-router-dom';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport Datetime from 'react-datetime';\nimport 'react-datetime/css/react-datetime.css';\nimport './Task.css';\nimport PropTypes from 'prop-types';\n\nconst Task = ({ show, onClose, taskToEdit, initialCategory }) => {\n  const navigate = useNavigate();\n\n  const categories = [\n    { id: 'todo', name: 'To Do' },\n    { id: 'inProgress', name: 'In Progress' },\n    { id: 'awaitingFeedback', name: 'Awaiting Feedback' },\n    { id: 'done', name: 'Done' },\n  ];\n\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [category, setCategory] = useState(initialCategory || '');\n  const [dueDate, setDueDate] = useState(null);\n  const [subtaskText, setSubtaskText] = useState('');\n  const [subtasks, setSubtasks] = useState([]);\n  const [assignedContacts, setAssignedContacts] = useState([]);\n  const [selectedPriority, setSelectedPriority] = useState(null);\n  const [formErrors, setFormErrors] = useState({\n    title: false,\n    description: false,\n    category: false,\n  });\n\n  const [users, setUsers] = useState([]);\n  const [usedColors, setUsedColors] = useState({});\n  const [selectedContacts, setSelectedContacts] = useState([]);\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_URL}api/users/`)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const contentType = response.headers.get('content-type');\n        if (contentType && contentType.indexOf('application/json') !== -1) {\n          return response.json();\n        } else {\n          throw new Error('Received non-JSON response');\n        }\n      })\n      .then(data => {\n        setUsers(data); // Set users state with received JSON data\n      })\n      .catch(error => {});\n  }, []);\n\n  useEffect(() => {\n    if (taskToEdit) {\n      setTitle(taskToEdit.title);\n      setDescription(taskToEdit.description);\n      setCategory(taskToEdit.category || ''); // Handle undefined category\n      setDueDate(taskToEdit.due_date ? new Date(taskToEdit.due_date) : null);\n      setSubtasks(taskToEdit.subtasks || []);\n      setAssignedContacts(taskToEdit.contacts || []);\n      setSelectedPriority(taskToEdit.priority || null);\n    } else {\n      setCategory(initialCategory || ''); // Set category to an empty string if undefined\n    }\n  }, [taskToEdit, initialCategory]);\n\n  const handleAddSubtask = () => {\n    if (subtaskText.trim()) {\n      setSubtasks([...subtasks, { text: subtaskText, completed: false }]);\n      setSubtaskText('');\n    }\n  };\n\n  const handleAssignContact = event => {\n    const selectedContactId = parseInt(event.target.value);\n    const selectedContact = users.find(user => user.id === selectedContactId);\n\n    if (\n      selectedContact &&\n      !assignedContacts.some(contact => contact.id === selectedContact.id)\n    ) {\n      setAssignedContacts([...assignedContacts, selectedContact]);\n      setSelectedContacts([...selectedContacts, selectedContact]);\n      setUsedColors({ ...usedColors, [selectedContact.color]: true });\n    }\n  };\n\n  const handleRemoveAssignedContact = contactId => {\n    const removedContact = assignedContacts.find(contact => contact.id === contactId);\n    if (removedContact) {\n      const { color } = removedContact;\n      const updatedContacts = assignedContacts.filter(contact => contact.id !== contactId);\n      setAssignedContacts(updatedContacts);\n      setUsedColors({ ...usedColors, [color]: false });\n      setSelectedContacts(selectedContacts.filter(contact => contact.id !== contactId));\n    }\n  };\n\n  const handleSelectPriority = priority => {\n    setSelectedPriority(priority);\n  };\n\n  const handleClearAll = () => {\n    setTitle('');\n    setDescription('');\n    setCategory('');\n    setDueDate(null);\n    setSubtaskText('');\n    setSubtasks([]);\n    setAssignedContacts([]);\n    setSelectedPriority(null);\n    setUsedColors({});\n    setFormErrors({\n      title: false,\n      description: false,\n      category: false,\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let errors = {};\n\n    if (!title.trim()) {\n      errors = { ...errors, title: true };\n    }\n    if (!description.trim()) {\n      errors = { ...errors, description: true };\n    }\n    if (!category) {\n      errors = { ...errors, category: true };\n    }\n\n    if (Object.keys(errors).length > 0) {\n      setFormErrors(errors);\n      return;\n    }\n\n    const taskData = {\n      title,\n      description,\n      category,\n      due_date: dueDate,\n      priority: selectedPriority,\n      subtasks: subtasks.map(subtask => ({\n        text: subtask.text,\n        completed: subtask.completed,\n      })),\n      contacts: assignedContacts.map(contact => ({\n        id: contact.id, // ID des Kontakts\n        first_name: contact.first_name,\n        last_name: contact.last_name,\n        color: contact.color,\n      })),\n    };\n\n    // Check for invalid contact IDs\n    const invalidContacts = taskData.contacts.filter(contact => !contact.id);\n    if (invalidContacts.length > 0) {\n      return; // Prevent form submission\n    }\n\n    if (taskToEdit) {\n      fetch(`${process.env.REACT_APP_API_URL}/api/tasks/${taskToEdit.id}/`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(taskData),\n      })\n        .then(response => {\n          if (!response.ok) {\n            return response.json().then(errorData => {\n              throw new Error(`HTTP error! status: ${response.status}`);\n            });\n          }\n          return response.json();\n        })\n        .then(data => {\n          handleClearAll();\n          onClose();\n          navigate('/board'); // Redirect to the board\n          // window.location.reload();\n        })\n        .catch(error => {});\n    } else {\n      fetch(`${process.env.REACT_APP_API_URL}api/tasks/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(taskData),\n      })\n        .then(response => {\n          if (!response.ok) {\n            return response.json().then(errorData => {\n              throw new Error(`HTTP error! status: ${response.status}`);\n            });\n          }\n          return response.json();\n        })\n        .then(data => {\n          // window.location.reload();\n          handleClearAll();\n          onClose();\n          navigate('/board'); // Redirect to the board\n        })\n        .catch(error => {});\n    }\n  };\n\n  return (\n    <div className={`task-container ${show ? 'show' : ''}`}>\n      <div className=\"popup-content\">\n        <button\n          className=\"close-button\"\n          onClick={() => {\n            onClose();\n            navigate('/board');\n          }}\n        >\n          &times;\n        </button>\n        <div className=\"task-title-popup\">\n          <h2>{taskToEdit ? 'Edit Task' : 'Add Task'}</h2>\n        </div>\n      </div>\n      <form className=\"task-form\" onSubmit={handleSubmit}>\n        <div className=\"form-left\">\n          <label>Title</label>\n          <input\n            type=\"text\"\n            value={title}\n            onChange={e => setTitle(e.target.value)}\n            placeholder=\"Enter a title\"\n            className={formErrors.title ? 'error' : ''}\n          />\n          {formErrors.title && <div className=\"error-text\">This field is required</div>}\n          <label>Description</label>\n          <textarea\n            value={description}\n            onChange={e => setDescription(e.target.value)}\n            placeholder=\"Enter a description\"\n            className={formErrors.description ? 'error' : ''}\n          ></textarea>\n          {formErrors.description && <div className=\"error-text\">This field is required</div>}\n          <label>Category</label>\n          <select\n            value={category}\n            onChange={e => setCategory(e.target.value)}\n            className={formErrors.category ? 'error' : ''}\n          >\n            <option value=\"\">Select task category</option>\n            {categories.map(cat => (\n              <option key={cat.id} value={cat.id}>\n                {cat.name}\n              </option>\n            ))}\n          </select>\n          {formErrors.category && <div className=\"error-text\">This field is required</div>}\n          <label>Assigned to</label>\n          <select onChange={handleAssignContact}>\n            <option value=\"\">Select contacts to assign</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n                disabled={selectedContacts.some(c => c.id === user.id)}\n              >\n                {user.first_name} {user.last_name}\n              </option>\n            ))}\n          </select>\n          <ul className=\"assigned-contacts\">\n            {assignedContacts.map(contact => (\n              <li key={contact.id}>\n                <div className=\"contact-info-task\">\n                  <div\n                    className=\"contact-color\"\n                    style={{ backgroundColor: contact.color }}\n                  ></div>\n                  {contact.first_name} {contact.last_name}\n                  <button\n                    type=\"button\"\n                    onClick={() => handleRemoveAssignedContact(contact.id)}\n                  >\n                    Remove\n                  </button>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"form-right\">\n          <label>Due Date</label>\n          <Datetime\n            value={dueDate}\n            onChange={date => setDueDate(date)}\n            timeFormat={false}\n            closeOnSelect={true}\n          />\n          <label>Subtasks</label>\n          <div className=\"subtask-input\">\n            <input\n              type=\"text\"\n              value={subtaskText}\n              onChange={e => setSubtaskText(e.target.value)}\n              placeholder=\"Enter a subtask\"\n            />\n            <button type=\"button\" onClick={handleAddSubtask}>\n              Add\n            </button>\n          </div>\n          <ul className=\"subtasks-list\">\n            {subtasks.map((subtask, index) => (\n              <li key={index}>\n                {subtask.text}\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    const updatedSubtasks = [...subtasks];\n                    updatedSubtasks[index].completed = !updatedSubtasks[index].completed;\n                    setSubtasks(updatedSubtasks);\n                  }}\n                >\n                  {subtask.completed ? 'Undo' : 'Complete'}\n                </button>\n              </li>\n            ))}\n          </ul>\n          <label>Priority</label>\n          <div className=\"priority-buttons\">\n            {['low', 'medium', 'high'].map(priority => (\n              <button\n                key={priority}\n                type=\"button\"\n                className={selectedPriority === priority ? 'selected' : ''}\n                onClick={() => handleSelectPriority(priority)}\n              >\n                {priority.charAt(0).toUpperCase() + priority.slice(1)}\n              </button>\n            ))}\n          </div>\n        </div>\n        <div className=\"form-footer\">\n          <button type=\"submit\" className=\"submit-button\">\n            {taskToEdit ? 'Update Task' : 'Create Task'}\n          </button>\n          <button type=\"button\" className=\"clear-button\" onClick={handleClearAll}>\n            Clear All\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nTask.propTypes = {\n  show: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  taskToEdit: PropTypes.object,\n  initialCategory: PropTypes.string,\n};\n\nexport default Task;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}